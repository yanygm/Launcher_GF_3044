<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AA+AAAAfwAAAf/AAAP/+AAP//4AP//////8=
</value>
  </data>
</root>